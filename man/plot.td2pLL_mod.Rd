% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot.td2pLL_mod.R
\name{plot.td2pLL_mod}
\alias{plot.td2pLL_mod}
\title{Plot interactive td2pLL models}
\usage{
\method{plot}{td2pLL_mod}(
  x = NULL,
  td2pLL_coefs = NULL,
  dose_lim = NULL,
  time_lim = NULL,
  add_model_data = TRUE,
  add_ext_data = NULL,
  n_grid = 100,
  title = NULL,
  xaxis_scale = "log",
  yaxis_scale = "-",
  xaxis_title = "Dose",
  yaxis_title = "Time",
  zaxis_title = "Response",
  add_ED50_line = TRUE,
  ED50_line_col = "red",
  ED50_line_width = 6,
  ...
)
}
\arguments{
\item{x}{(\code{td2pLL_mod} object)\cr
A \code{td2pLL_mod} object generatet via \link{fit_td2pLL}. If not
provided, alternatively, \code{td2pLL_coefs} can be provided.}

\item{td2pLL_coefs}{(named \code{numeric(4)})\cr
If \code{td2pLL_model} is not provided, then \code{td2pLL_coefs} contains
parameters for \code{h}, \code{delta}, \code{gamma} and \code{c0}
of the \link{td2pLL} model.}

\item{dose_lim}{(\code{numeric(2)})\cr
Boundaries of the doses (xaxis) for plotting.
Note: If \code{xaxis_scale = "log"} (default), then \code{dose_lim} cannot include 0.
If \code{dose_lim} shall include the 0, set \code{xaxis_scale = "linear"}.}

\item{time_lim}{(\code{numeric(2)})\cr
Boundaries for the time (yaxis) for plotting.}

\item{add_model_data}{(\code{logical(1)})\cr
By default, if \code{x} is a \code{td2pLL_mod} object, the original data
used for the fit are added to the plot.}

\item{add_ext_data}{(\code{data.frame()})\cr
Optional numeric \code{data.frame} to add data points to the
surface plot. Must include columns \code{dose}, \code{time} and \code{resp}.}

\item{n_grid}{(\code{integer(1)})\cr
\code{n_grid*n_grid} is the \code{dose*time} grid for surface evaluations
that will be interpolated. Increase \code{n_grid} for a smoother plot.}

\item{title}{(\code{character(1)})\cr
Optional plot title.}

\item{xaxis_scale}{(\code{character(1)} in \code{c("log", "linear", "-")}\cr
Scale of x-axis (dose-axis).\cr
If \code{"-"} is set, then \code{\link[=plot_ly]{plot_ly()}} tries to guess which scale to use.}

\item{yaxis_scale}{(\code{character(1)} in \code{c("log", "linear", "-")}\cr
Scale of y-axis (time-axis).\cr
If \code{"-"} is set, then \code{\link[=plot_ly]{plot_ly()}} tries to guess which scale to use.}

\item{xaxis_title, yaxis_title, zaxis_title}{(\code{character(1)})\cr
Title for dose-axis, time-axis and response-axis.}

\item{add_ED50_line}{(\code{logical(1)})\cr
Indicates if the line of ED50 values shall be annotated (=\code{TRUE}).}

\item{ED50_line_col}{(\code{character(1)})\cr
Color for optionally added ED50 line.}

\item{ED50_line_width}{(\code{numeric(1)})\cr
Width for optionally added ED50 line.}

\item{...}{\link{any} \cr
Not used.}
}
\description{
\code{plot.td2pLL_mod} is the plot method for the S3 class
\code{td2pLL_mod}.
Model fits generated with the \code{\link[=fit_td2pLL]{fit_td2pLL()}} function are of class
\code{c("td2pLL_mod", "nls")} and can therefore be used for this plot method.
If no fitted model but a through parameters pre-specified td2pLL model
shall be plotted, this can be done via the \code{td2pLL_coefs} argument.
For details on the \code{td2pLL} model, see \code{\link[=fit_td2pLL]{fit_td2pLL()}}.
If the \code{\link[=TDR]{TDR()}} function is used which performs the two-step
modeling pipeline, one can apply \code{plot.td2pLL_mod()} to the \code{fit} list entry of the
object returned by \code{\link[=TDR]{TDR()}},
if fitting a \code{td2pLL} model was chosen in accordance
to the anova pre-test (see \code{\link[=td2pLL_anova]{td2pLL_anova()}}) calculated in \code{\link[=TDR]{TDR()}}.
}
\details{
For further details on the td2pLL model, check \code{\link[=fit_td2pLL]{fit_td2pLL()}}.
For details on the ANOVA used, see \code{\link[=td2pLL_anova]{td2pLL_anova()}}. More over,
the entire procedure is explained in duda et al. (2021).
For plotting, the \code{plot_ly} function of package \code{plotly} is used.
}
\examples{
data(cytotox)
data_subset <- cytotox[cytotox$compound == "ASP", c("expo", "dose", "resp")]
colnames(data_subset)[1] <- "time"
fit <- fit_td2pLL(data = data_subset)
plot(fit)
plot.td2pLL_mod(x=NULL, td2pLL_coefs = c(h = 2, delta = 5, gamma = 2, c0=1),
dose_lim = c(0, 10), time_lim = c(1, 2), xaxis_scale = "linear", n_grid = 200)
}
